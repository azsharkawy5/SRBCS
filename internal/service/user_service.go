package service

import (
	"context"
	"fmt"

	"github.com/azsharkawy5/SRBCS/internal/domain"
)

// UserRepository defines what the user service needs from the data layer
// Following the rule: "Interfaces belong to the consumer, not the provider"
type UserRepository interface {
	Create(ctx context.Context, user *domain.User) error
	GetByID(ctx context.Context, id string) (*domain.User, error)
	GetByEmail(ctx context.Context, email string) (*domain.User, error)
	Update(ctx context.Context, user *domain.User) error
	Delete(ctx context.Context, id string) error
	List(ctx context.Context, limit, offset int) ([]*domain.User, error)
}

// UserService provides business logic for user operations
type UserService struct {
	userRepo UserRepository
}

// NewUserService creates a new user service
func NewUserService(userRepo UserRepository) *UserService {
	return &UserService{
		userRepo: userRepo,
	}
}

// CreateUser creates a new user with business validation
func (s *UserService) CreateUser(ctx context.Context, email, name string) (*domain.User, error) {
	// Check if user already exists by email
	existingUser, err := s.userRepo.GetByEmail(ctx, email)
	if err == nil && existingUser != nil {
		return nil, fmt.Errorf("user with email %s: %w", email, domain.ErrUserAlreadyExists)
	}

	// Create new user with domain validation (ID will be generated by database)
	user, err := domain.NewUser(email, name)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	// Save to repository (repository will set the generated ID)
	if err := s.userRepo.Create(ctx, user); err != nil {
		return nil, fmt.Errorf("failed to save user: %w", err)
	}

	return user, nil
}

// GetUserByID retrieves a user by ID
func (s *UserService) GetUserByID(ctx context.Context, id string) (*domain.User, error) {
	if id == "" {
		return nil, domain.ErrInvalidUserID
	}

	user, err := s.userRepo.GetByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get user by ID %s: %w", id, err)
	}

	return user, nil
}

// GetUserByEmail retrieves a user by email
func (s *UserService) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	if email == "" {
		return nil, domain.ErrInvalidUserEmail
	}

	user, err := s.userRepo.GetByEmail(ctx, email)
	if err != nil {
		return nil, fmt.Errorf("failed to get user by email %s: %w", email, err)
	}

	return user, nil
}

// UpdateUser updates an existing user
func (s *UserService) UpdateUser(ctx context.Context, id string, email, name string) (*domain.User, error) {
	// Get existing user
	user, err := s.userRepo.GetByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get user for update: %w", err)
	}

	// Check if email is being changed and if new email already exists
	if email != user.Email && email != "" {
		existingUser, err := s.userRepo.GetByEmail(ctx, email)
		if err == nil && existingUser != nil && existingUser.ID != id {
			return nil, fmt.Errorf("email %s already in use: %w", email, domain.ErrUserAlreadyExists)
		}
	}

	// Update fields with domain validation
	if email != "" && email != user.Email {
		if err := user.UpdateEmail(email); err != nil {
			return nil, fmt.Errorf("failed to update email: %w", err)
		}
	}

	if name != "" && name != user.Name {
		if err := user.UpdateName(name); err != nil {
			return nil, fmt.Errorf("failed to update name: %w", err)
		}
	}

	// Save updated user
	if err := s.userRepo.Update(ctx, user); err != nil {
		return nil, fmt.Errorf("failed to save updated user: %w", err)
	}

	return user, nil
}

// DeleteUser deletes a user by ID
func (s *UserService) DeleteUser(ctx context.Context, id string) error {
	if id == "" {
		return domain.ErrInvalidUserID
	}

	// Check if user exists
	_, err := s.userRepo.GetByID(ctx, id)
	if err != nil {
		return fmt.Errorf("user not found for deletion: %w", err)
	}

	// Delete user
	if err := s.userRepo.Delete(ctx, id); err != nil {
		return fmt.Errorf("failed to delete user: %w", err)
	}

	return nil
}

// ListUsers retrieves a paginated list of users as DTOs
func (s *UserService) ListUsers(ctx context.Context, limit, offset int) ([]*domain.User, error) {
	if limit <= 0 {
		limit = 10 // Default limit
	}
	if limit > 100 {
		limit = 100 // Maximum limit
	}
	if offset < 0 {
		offset = 0
	}

	userDTOs, err := s.userRepo.List(ctx, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to list users: %w", err)
	}

	return userDTOs, nil
}
