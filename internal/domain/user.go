package domain

import (
	"fmt"
	"regexp"
	"time"
)

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

// User represents a user entity in the domain
type User struct {
	ID              string
	Name            string
	Email           string
	IsEmailVerified bool
	IsActive        bool
	OTP             *string
	OTPExpiresAt    *time.Time
	Role            Role
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

// NewUser creates a new user with validation (ID will be generated by database)
func NewUser(email, name string) (*User, error) {
	user := &User{
		Email:     email,
		Name:      name,
		Role:      RoleUser, // Default role
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := user.ValidateForCreation(); err != nil {
		return nil, fmt.Errorf("invalid user: %w", err)
	}

	return user, nil
}

// NewUserWithID creates a user with an existing ID (for loading from database)
func NewUserWithID(id, email, name string, role Role, isEmailVerified, isActive bool, otp *string, otpExpiresAt *time.Time, createdAt, updatedAt time.Time) (*User, error) {
	user := &User{
		ID:              id,
		Email:           email,
		Name:            name,
		Role:            role,
		IsEmailVerified: isEmailVerified,
		IsActive:        isActive,
		OTP:             otp,
		OTPExpiresAt:    otpExpiresAt,
		CreatedAt:       createdAt,
		UpdatedAt:       updatedAt,
	}

	if err := user.Validate(); err != nil {
		return nil, fmt.Errorf("invalid user: %w", err)
	}

	return user, nil
}

// Validate performs basic domain validation on the user (for existing users with ID)
func (u *User) Validate() error {
	if u.ID == "" {
		return ErrInvalidUserID
	}

	return u.ValidateForCreation()
}

// ValidateForCreation performs validation for new users (without ID requirement)
func (u *User) ValidateForCreation() error {
	if u.Name == "" {
		return ErrInvalidUserName
	}

	if u.Role == "" {
		return ErrInvalidUserRole
	}

	if !u.IsValidEmail() {
		return ErrInvalidUserEmail
	}

	return nil
}

// IsValidEmail validates the email format
func (u *User) IsValidEmail() bool {
	if u.Email == "" {
		return false
	}

	// Basic email regex
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
	return emailRegex.MatchString(u.Email)
}

// UpdateEmail updates the user's email with validation
func (u *User) UpdateEmail(email string) error {
	oldEmail := u.Email
	u.Email = email
	u.UpdatedAt = time.Now()

	if !u.IsValidEmail() {
		u.Email = oldEmail // Revert on validation failure
		return ErrInvalidUserEmail
	}

	return nil
}

// UpdateName updates the user's name with validation
func (u *User) UpdateName(name string) error {
	if name == "" {
		return ErrInvalidUserName
	}

	u.Name = name
	u.UpdatedAt = time.Now()
	return nil
}
